add2<-function(x,y){
x+y
}
add2(7,9)
above10<- function(x) {
use <- x > 10
x[use]
}
y <-(1,10,11,6,99,7,9,0,44,33)
y <-[1,10,11,6,99,7,9,0,44,33]
y <-(1,10,11,6,99,7,9,0,44,33)
y <-c(1,10,11,6,99,7,9,0,44,33)
above10(y)
x<-list(a= matrix(3,4,87,9,2,2), b= matrix(7,6,5,2,2,2))
x<-list(a= matrix(3:8,2,2), b= matrix(7,6,5,2,2,2))
x<-list(a= matrix(3:8,2,2), b= matrix(5:10,2,2))
x
lappy(x, function(test) test(1,))
lapply(x, function(test) test(1,))
lapply(x, function(elt) elt(1,))
lapply(x, function(elt) elt[1,])
lapply(x, function(test) test[1,])
lapply(x, function(test) test[1,]*5)
lapply(x, function(test, best) test[1,]*5, best[,1])
lapply(x, function(test, best) test[1,]*5, best[,1]*7)
lapply(x, function(test, best) test[1,]*5 best[,1]*7)
lapply(x, function(test, best), test[1,]*5, best[,1]*7)
lapply(x, function(test, best) test[1,]*5)
lapply(x, function(test, best) test[,1]*5)
lapply(x, function(test) test[,1]*5)
library(datasets)
data(iris)
?iris
h<-split(iris,iris$Species)
h
n<-h$virginica
n
colmean(n$Sepal.Length)
mean(n$Sepal.Length)
mean(n$Sepal.Width)
colMeans(iris)
iris
apply(iris[,1:4], 2, mean)
apply(iris, 2, mean)
data(mtcars)
$mtcars
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
carcalc<-sapply(split(mtcars$hp, mtcars$cyl), mean)
carcalc$8-carcalc$4
carcalc8
carcalc$8
carcalc
209.21429-82.63636
debug(ls)
ls
n
tapply(iris$Sepal.Length, iris$Species, mean)
makeCacheMatrix <- function(x = matrix()) {
inverse<-NULL
load<- function()x
cacheinv<-function(inv)inverse<<- inv
loadinverse<-function()inverse
list(load = load, cacheinv = cacheinv, loadinverse = loadinverse)
}
testmatrix<-matrix(1:4,2,2)
testmatrix
testmatrixf<-makeCacheMatrix(testmatrix)
testmatrixf$load
testmatrixf$load()
testmatrixf$loadinverse()
testmatrixf$cacheinv(5)
testmatrixf$loadinverse()
makeCacheMatrix <- function(x = matrix()) {
inverse<-NULL
load<- function()x
cacheinv<-function(inv)inverse<<- inv
loadinverse<-function()inverse
reset<- function(z) {
x<<-z
inverse<<-Null
}
list(load = load, cacheinv = cacheinv, loadinverse = loadinverse)
}
testmatrixf<-makeCacheMatrix(testmatrix)
testmatrixf$reset(matrix(1:6,3,3))
testmatrixf$reset(matrix(1:6,3,3))
zip<-matrix(1:6,3,3)
testmatrixf$reset(zip
)
testmatrix$reset
makeCacheMatrix <- function(x = matrix()) {
inverse<-NULL
load<- function()x
cacheinv<-function(inv)inverse<<- inv
loadinverse<-function()inverse
reset<- function(z) {
x<<-z
inverse<<-Null
}
list(load = load, cacheinv = cacheinv, loadinverse = loadinverse, reset = reset)
}
testmatrixf<-makeCacheMatrix(testmatrix)
testmatrix$reset(zip)
zip
testmatrixf$reset(zip)
testmatrixf
testmatrix$load
testmatrix$load()
testmatrixf$load()
zaa<-(matrix(1:8,4,4))
zaa
testmatrixf$load()
testmatrixf$reset()
testmatrixf$reset(zaa)
makeCacheMatrix <- function(x = matrix()) {
inverse<-NULL
load<- function()x
cacheinv<-function(inv)inverse<<- inv
loadinverse<-function()inverse
reset<- function(z) {
x<<-z
inverse<<-NULL
}
list(load = load, cacheinv = cacheinv, loadinverse = loadinverse, reset = reset)
}
testmatrixf$reset(zaa)
testmatrixf<-makeCacheMatrix(testmatrix)
testmatrixf$load()
testmatrixf$reset(zaa)
testmatrixf$load()
cacheSolve <- function(x, ...) {
inverse<- x$loadinverse()
if(!is.null(inverse)){
return(inverse)
}
matrixdata<- x$load()
inverse<- solve(matrixdata, ...)
x$cacheinv(inverse)
return(inverse)
## Return a matrix that is the inverse of 'x'
}
cacheSolve <- function(x, ...) {
inverse<- x$loadinverse()
if(!is.null(inverse)){
return(inverse)
}
matrixdata<- x$load()
inverse<- solve(matrixdata, ...)
x$cacheinv(inverse)
return(inverse)
## Return a matrix that is the inverse of 'x'
}
testmatrixf<-makeCacheMatrix(testmatrix)
cacheSolve(testmatrixf)
cacheSolve(testmatrixf)
cacheSolve <- function(x, ...) {
inverse<- x$loadinverse()
if(!is.null(inverse)){
print("It is working")
return(inverse)
}
matrixdata<- x$load()
inverse<- solve(matrixdata, ...)
x$cacheinv(inverse)
return(inverse)
## Return a matrix that is the inverse of 'x'
}
testmatrixf<-makeCacheMatrix(testmatrix)
cacheSolve(testmatrixf)
cacheSolve(testmatrixf)
testmatrixf<-reset(zaa)
testmatrixf$reset(zaa)
cacheSolve(testmatrixf)
testmatrixf$reset(zip)
cacheSolve(testmatrixf)
testmatrixf$reset(testmatrix)
cacheSolve(testmatrixf)
zip
zaa
zip<-matrix(3,5,7,8, 2,2)
zip<-matrix(3,5,7,8,2,2)
zip<-matrix(3,5,7,8,nrow=2,nrow=2)
zip<-matrix(3,5,7,8,nrow=2,ncol=2)
zip<-matrix(c(3,5,7,8),nrow=2,ncol=2)
zip
testmatrixf$reset(zip)
testmatrixf$load()
cacheSolve(testmatrixf)
cacheSolve(testmatrixf)
zaa
testmatrixf$reset(zaa)
cacheSolve(testmatrixf)
cacheSolve(testmatrixf)
zip<-matrix(c(1,4,2,3,1,5,2,3,2),3,3)
zip
testmatrixf$reset(zip)
testmatrixf$load()
cacheSolve(testmatrixf)
zart<-matrix(c(1,0,0,0,1,0,1,3,0,-1,0,0,0,2,0,0,0,-3,-1,1,0,-1,-2,0,0), 5, 5)
zart
testmatrixf$reset(zart)
cacheSolve(testmatrixf)
setwd("~/Coursera/R Programming/Week 2/Programming Assignment/Assignment 2/ProgrammingAssignment2")
